import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import joblib
from datetime import datetime, timedelta

# Configuration de la page
st.set_page_config(
    page_title="üîç Dashboard Marketing & Segmentation",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Chargement des donn√©es
@st.cache_data
def load_data():
    try:
        df = pd.read_csv('final_df.csv')
        return df
    except FileNotFoundError:
        st.error("Fichier de donn√©es non trouv√©. Veuillez v√©rifier le chemin du fichier.")
        st.stop()

df = load_data()

# Chargement des mod√®les de clustering
main_pipeline = joblib.load("main_clustering_pipeline.pkl")
sub_kmeans = joblib.load("sub_clustering_model.pkl")
num_cols = [
    'nb_sessions','avg_pageviews','nb_clicks','clicks_per_session','click_frequency',
    'recency_days','avg_days_between_sessions','avg_prior_sessions','session_efficiency',
    'engagement_score','global_engagement_score','engagement_intensity',
    'multi_interaction_score','engagement_trend','retention_like_score','executive_weighted_score',
    'bounce_rate','nb_entry_pages','entry_pages_per_session','unique_clicks_ratio',
    'pageview_click_ratio','diversity_score','regularity_score'
]

# Appliquer le pipeline principal
df['cluster'] = main_pipeline.predict(df[num_cols]).astype(str)

# Sous-clustering du cluster 3
mask_cluster_3 = df['cluster'] == '3'
if mask_cluster_3.sum() > 0:
    X_cluster_3 = df.loc[mask_cluster_3, num_cols]
    X_cluster_3_processed = main_pipeline.named_steps['prep'].transform(X_cluster_3)
    sub_labels = sub_kmeans.predict(X_cluster_3_processed)
    cluster_3_indices = df[mask_cluster_3].index.to_numpy()
    for s in range(2):  # 2 sous-clusters
        sub_idx = cluster_3_indices[sub_labels == s]
        df.loc[sub_idx, 'cluster'] = f"3_{s+1}"

# Dictionnaire des profils de clusters d√©taill√©s pour Management & Data Science
cluster_profiles = {
    '0': {
        'title': "Faiblement Engag√©, Passif",
        'size': "3 849 utilisateurs",
        'description': "Utilisateurs avec un faible engagement (score moyen: 3,18) et peu d'interactions (1,86 clics/session). Principalement issus de recherche organique (62,8%).",
        'strategy': "Activation et √©ducation progressive",
        'actions': [
            "Cr√©er une s√©rie de contenus d'introduction 'Data Science pour tous'",
            "Proposer un parcours guid√© de d√©couverte des ressources fondamentales",
            "Mettre en avant des t√©moignages d'utilisateurs ayant progress√©",
            "Optimiser le r√©f√©rencement naturel sur les sujets les plus recherch√©s",
            "R√©duire le rebond √©lev√© par des contenus d'accroche imm√©diate (vid√©os, infographies)"
        ],
        'kpis': [
            "Taux de rebond sur les pages d'introduction",
            "Taux de progression dans le parcours guid√©",
            "Taux de conversion vers l'inscription compl√®te",
            "Augmentation du temps moyen pass√© sur le site"
        ],
        'content_types': ["Articles introductifs", "Vid√©os explicatives", "Infographies simplifi√©es"]
    },
    '1': {
        'title': "Passif √† Risque √©lev√© de D√©sengagement",
        'size': "4 369 utilisateurs",
        'description': "Utilisateurs avec un engagement tr√®s limit√© (score moyen: 2,18) et des interactions mod√©r√©es sans profondeur.",
        'strategy': "R√©activation cibl√©e et d√©monstration de valeur",
        'actions': [
            "Proposer des cas d'√©tudes concrets montrant l'impact dans leur secteur",
            "Mettre en avant les nouveaux contenus depuis leur derni√®re visite",
            "Cr√©er des parcours de micro-apprentissage √† faible engagement initial",
            "Campagnes de r√©activation email cibl√©es avec contenu personnalis√©",
            "Am√©liorer l'UX/UI sur les pages d'entr√©e majeures"
        ],
        'kpis': [
            "Taux de r√©activation apr√®s campagne",
            "Taux d'ouverture des emails et clics",
            "Augmentation du temps pass√© sur la plateforme",
            "R√©duction du taux de d√©sengagement"
        ],
        'content_types': ["Cas d'√©tudes", "Tutoriels courts", "Newsletters cibl√©es"]
    },
    '2': {
        'title': "Tr√®s Faible Engagement",
        'size': "273 utilisateurs",
        'description': "Petit groupe d'utilisateurs avec un engagement tr√®s faible (score: 1,68) et peu d'interactions.",
        'strategy': "Reconqu√™te intensive avec proposition de valeur claire",
        'actions': [
            "Offrir un acc√®s temporaire √† des contenus premium pour d√©montrer la valeur",
            "Proposer des formats de contenu ultra-simplifi√©s et accessibles",
            "Mettre en avant les success stories de la communaut√© pour inspirer l'engagement",
            "Lancer des campagnes de retargeting intensives sur les r√©seaux sociaux",
            "Cr√©er des landing pages sp√©cifiquement con√ßues pour ce type de visiteurs"
        ],
        'kpis': [
            "Taux d'activation de l'offre premium",
            "Taux de r√©tention apr√®s la p√©riode d'essai",
            "Augmentation du nombre de sessions",
            "R√©duction du taux de rebond"
        ],
        'content_types': ["Vid√©os courtes", "Infographies", "T√©moignages"]
    },
    '3_1': {
        'title': "Actif avec Fort Potentiel",
        'size': "7 974 utilisateurs",
        'description': "Grand groupe d'utilisateurs avec un bon engagement (score: 4,27) et une bonne interactivit√© (3,37 clics/session).",
        'strategy': "Approfondissement et engagement communautaire",
        'actions': [
            "Proposer des parcours th√©matiques avanc√©s bas√©s sur leurs centres d'int√©r√™t",
            "Encourager la participation aux Data Challenges et projets collaboratifs",
            "Inviter √† contribuer √† la communaut√© par des partages d'exp√©rience",
            "Cr√©er des contenus interactifs fr√©quents : quiz, webinars, forums",
            "Mettre en place une strat√©gie de fid√©lisation avanc√©e (points, badges)"
        ],
        'kpis': [
            "Taux de participation aux Data Challenges",
            "Nombre de contributions √† la communaut√©",
            "Taux d'engagement avec le contenu avanc√©",
            "Progression dans les parcours th√©matiques"
        ],
        'content_types': ["Projets pratiques", "Webinaires avanc√©s", "Forums sp√©cialis√©s"]
    },
    '3_2': {
        'title': "Moyennement Actif mais Sous-exploit√©",
        'size': "674 utilisateurs",
        'description': "Groupe mod√©r√© avec un engagement moyen (score: 3,46) et des interactions moyennes (2,00 clics/session).",
        'strategy': "Activation cibl√©e et personnalisation accrue",
        'actions': [
            "Proposer des contenus interm√©diaires adapt√©s √† leur niveau de comp√©tence",
            "Mettre en avant les discussions et projets actifs dans leurs domaines d'int√©r√™t",
            "Sugg√©rer des connexions avec d'autres membres aux int√©r√™ts similaires",
            "Introduire des messages contextuels (pop-ups personnalis√©es)",
            "Optimiser les points d'entr√©e cl√©s pour faciliter l'acc√®s au contenu pertinent"
        ],
        'kpis': [
            "Taux de clics sur les contenus recommand√©s",
            "Augmentation du nombre d'interactions par session",
            "Taux de participation aux mini-challenges",
            "Nombre de connexions √©tablies avec d'autres membres"
        ],
        'content_types': ["Datasets comment√©s", "Forums de discussion", "Exercices pratiques"]
    },
    '4': {
        'title': "Bonne Interaction G√©n√©rale",
        'size': "675 utilisateurs",
        'description': "Groupe mod√©r√© avec un engagement √©lev√© (score: 4,80) mais des interactions moyennes (1,94 clics/session).",
        'strategy': "Diversification des interactions et approfondissement",
        'actions': [
            "Proposer l'exploration de nouveaux domaines connexes √† leurs int√©r√™ts",
            "Encourager le partage de leurs connaissances via des contributions",
            "Sugg√©rer des collaborations avec d'autres membres actifs",
            "Inciter √† des interactions suppl√©mentaires via des Call-To-Action visibles",
            "D√©velopper du contenu premium disponible apr√®s interaction"
        ],
        'kpis': [
            "Diversit√© des contenus consult√©s",
            "Taux de contribution (commentaires, √©valuations)",
            "Nombre de nouvelles connexions √©tablies",
            "Augmentation du nombre de clics par session"
        ],
        'content_types': ["Articles sp√©cialis√©s", "Ateliers pratiques", "Projets collaboratifs"]
    },
    '5': {
        'title': "Petit Groupe Actif",
        'size': "440 utilisateurs",
        'description': "Petit groupe engag√© avec un bon potentiel d'approfondissement (score: 4,07).",
        'strategy': "Sp√©cialisation et valorisation des contributions",
        'actions': [
            "Proposer des contenus de niche et avanc√©s dans leurs domaines de pr√©dilection",
            "Encourager la cr√©ation et le partage de contenus sp√©cialis√©s",
            "Mettre en avant leur expertise aupr√®s de la communaut√©",
            "D√©velopper des contenus tr√®s cibl√©s, sp√©cifiquement adapt√©s √† ce groupe",
            "Relances personnalis√©es via campagnes email sp√©cialis√©es"
        ],
        'kpis': [
            "Taux de participation aux groupes sp√©cialis√©s",
            "Nombre et qualit√© des contenus cr√©√©s",
            "Influence sur la communaut√© (partages, mentions)",
            "Profondeur d'engagement avec les contenus de niche"
        ],
        'content_types': ["Articles de niche", "Groupes sp√©cialis√©s", "Opportunit√©s de publication"]
    },
    '6': {
        'title': "Tr√®s Actif et Intense",
        'size': "1 186 utilisateurs",
        'description': "Groupe significatif avec une forte intensit√© d'engagement (score: 3,85) et des interactions tr√®s √©lev√©es (6,13 clics/session).",
        'strategy': "Valorisation premium et leadership communautaire",
        'actions': [
            "Offrir un acc√®s anticip√© aux nouvelles fonctionnalit√©s et contenus",
            "Proposer des r√¥les de mentors ou d'animateurs th√©matiques",
            "Cr√©er des exp√©riences exclusives et personnalis√©es",
            "Mettre en place des exp√©riences premium et exclusives",
            "D√©ployer des strat√©gies communautaires fortes (groupes priv√©s, √©v√©nements)"
        ],
        'kpis': [
            "Taux d'activation du statut VIP",
            "Participation aux √©v√©nements exclusifs",
            "Impact des contributions (vues, partages)",
            "Influence sur l'acquisition de nouveaux membres"
        ],
        'content_types': ["Contenus exclusifs", "√âv√©nements VIP", "Opportunit√©s de mentorat"]
    },
    '7': {
        'title': "Petit Groupe Ultra-Engag√©",
        'size': "223 utilisateurs",
        'description': "Petit groupe d'√©lite avec un engagement exceptionnel (score: 4,80) et une tr√®s forte intensit√© (4,55).",
        'strategy': "Partenariat strat√©gique et co-cr√©ation",
        'actions': [
            "Proposer une relation privil√©gi√©e avec l'√©quipe de Management & Data Science",
            "Offrir des opportunit√©s de co-cr√©ation de contenus et fonctionnalit√©s",
            "Valoriser leur expertise √† travers des interviews et t√©moignages",
            "Renforcer la communication personnalis√©e (conseillers d√©di√©s)",
            "Cr√©er des contenus et √©v√©nements exclusifs, r√©serv√©s √† ces utilisateurs"
        ],
        'kpis': [
            "Taux d'acceptation du programme Ambassadeur",
            "Qualit√© et impact des co-cr√©ations",
            "Influence sur l'acquisition de nouveaux membres",
            "Taux de r√©tention de ce segment d'√©lite"
        ],
        'content_types': ["Co-cr√©ation de contenu", "Interviews", "Tables rondes"]
    }
}

# En-t√™te de la page
st.title("üîç Dashboard Marketing & Segmentation")
st.markdown("### Plateforme d'analyse de segmentation pour Management & Data Science")

# Date actuelle
current_date = datetime(2025, 4, 18)
st.markdown(f"*Donn√©es mises √† jour le {current_date.strftime('%d/%m/%Y')}*")

# Pr√©sentation des statistiques globales
st.subheader("üìä Vue d'ensemble")

col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric(label="Nombre total d'utilisateurs", value=f"{len(df):,}")
with col2:
    st.metric(label="Nombre de segments", value=len(df['cluster'].unique()))
with col3:
    avg_engagement = round(df['engagement_score'].mean(), 2)
    st.metric(label="Score d'engagement moyen", value=f"{avg_engagement}")
with col4:
    active_users = df[df['is_active'] == 1].shape[0]
    active_pct = round(active_users / len(df) * 100, 1)
    st.metric(label="Utilisateurs actifs", value=f"{active_pct}%")

# R√©partition des clusters
st.subheader("üìà R√©partition des segments")

col1, col2 = st.columns([2, 3])

with col1:
    cluster_counts = df['cluster'].value_counts().sort_index()
    
    # Cr√©er un DataFrame pour le graphique avec des titres plus descriptifs
    cluster_labels = []
    for cluster in cluster_counts.index:
        if cluster in cluster_profiles:
            cluster_labels.append(f"{cluster}: {cluster_profiles[cluster]['title']}")
        else:
            cluster_labels.append(f"Cluster {cluster}")
    
    cluster_df = pd.DataFrame({
        'Segment': cluster_labels,
        'Nombre d\'utilisateurs': cluster_counts.values
    })
    
    fig = px.bar(
        cluster_df,
        x='Segment',
        y='Nombre d\'utilisateurs',
        title="R√©partition des utilisateurs par segment",
        color='Nombre d\'utilisateurs',
        color_continuous_scale='Blues'
    )
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)
    
    # Tableau r√©capitulatif des segments
    st.markdown("### Aper√ßu des segments")
    
    segment_summary = []
    for cluster in sorted(cluster_counts.index):
        if cluster in cluster_profiles:
            segment_summary.append({
                "Segment": cluster,
                "Titre": cluster_profiles[cluster]['title'],
                "Effectif": f"{cluster_counts[cluster]:,}",
                "Strat√©gie": cluster_profiles[cluster]['strategy']
            })
    
    st.dataframe(pd.DataFrame(segment_summary), use_container_width=True)

with col2:
    # Profil des clusters avec radar chart am√©lior√©
    numeric_cols = ['engagement_score', 'global_engagement_score', 'engagement_intensity', 
                    'multi_interaction_score', 'session_efficiency', 'retention_like_score']
    
    # Renommer les colonnes pour plus de clart√©
    readable_cols = {
        'engagement_score': 'Engagement',
        'global_engagement_score': 'Engagement global',
        'engagement_intensity': 'Intensit√©',
        'multi_interaction_score': 'Multi-interaction',
        'session_efficiency': 'Efficacit√© session',
        'retention_like_score': 'R√©tention'
    }
    
    cluster_means = df.groupby('cluster')[numeric_cols].mean()
    normalized_means = (cluster_means - cluster_means.min()) / (cluster_means.max() - cluster_means.min())
    
    # Cr√©er le radar chart
    fig = go.Figure()
    
    # Utiliser une palette de couleurs coh√©rente
    colors = px.colors.qualitative.Bold
    
    for i, cluster in enumerate(sorted(df['cluster'].unique(), key=lambda x: (str(x)))):
        color_idx = i % len(colors)
        
        # Ajouter un titre descriptif si disponible
        if cluster in cluster_profiles:
            cluster_name = f"{cluster}: {cluster_profiles[cluster]['title']}"
        else:
            cluster_name = f"Cluster {cluster}"
            
        fig.add_trace(go.Scatterpolar(
            r=normalized_means.loc[cluster].values,
            theta=[readable_cols.get(col, col) for col in numeric_cols],
            fill='toself',
            name=cluster_name,
            line=dict(color=colors[color_idx])
        ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1]
            )
        ),
        showlegend=True,
        title="Profil des segments (caract√©ristiques normalis√©es)",
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.2,
            xanchor="center",
            x=0.5
        )
    )
    
    st.plotly_chart(fig, use_container_width=True)

# Analyse de d√©sengagement
st.subheader("‚ö†Ô∏è Analyse du d√©sengagement")

disengaged_users = df[df['is_disengaged'] == 1]
disengaged_pct = round(len(disengaged_users) / len(df) * 100, 1)

col1, col2 = st.columns(2)

with col1:
    st.metric("Utilisateurs d√©sengag√©s", f"{disengaged_pct}%", 
              delta=f"{disengaged_pct - 5.2:.1f}%" if disengaged_pct > 5.2 else f"{5.2 - disengaged_pct:.1f}%",
              delta_color="inverse")
    
    # Cr√©er un DataFrame pour le graphique avec des titres plus descriptifs
    disengaged_by_cluster = disengaged_users['cluster'].value_counts().sort_index()
    total_by_cluster = df['cluster'].value_counts().sort_index()
    
    # Calculer le pourcentage de d√©sengagement par cluster
    pct_disengaged = pd.DataFrame()
    pct_disengaged['Cluster'] = total_by_cluster.index
    pct_disengaged['Total'] = total_by_cluster.values
    pct_disengaged['D√©sengag√©s'] = [disengaged_by_cluster.get(c, 0) for c in total_by_cluster.index]
    pct_disengaged['Pourcentage'] = (pct_disengaged['D√©sengag√©s'] / pct_disengaged['Total'] * 100).round(1)
    
    # Ajouter les titres descriptifs
    pct_disengaged['Segment'] = pct_disengaged['Cluster'].apply(
        lambda x: f"{x}: {cluster_profiles.get(x, {}).get('title', 'Non d√©fini')}" if x in cluster_profiles else f"Cluster {x}"
    )
    
    # Cr√©er le graphique
    fig = px.bar(
        pct_disengaged,
        x='Segment',
        y='Pourcentage',
        title="Pourcentage de d√©sengagement par segment",
        color='Pourcentage',
        color_continuous_scale='Reds',
        text='Pourcentage'
    )
    fig.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)
    
    # Tableau des segments √† risque
    high_risk_segments = pct_disengaged.sort_values('Pourcentage', ascending=False).head(3)
    
    st.markdown("### Segments √† surveiller en priorit√©")
    
    for _, row in high_risk_segments.iterrows():
        cluster = row['Cluster']
        if cluster in cluster_profiles:
            st.warning(f"**{row['Segment']}** - {row['Pourcentage']}% de d√©sengagement")
            st.markdown(f"*Action recommand√©e:* {cluster_profiles[cluster]['actions'][0]}")

with col2:
    at_risk = df[(df['will_disengage_30d'] == 1) & (df['is_disengaged'] == 0)]
    at_risk_pct = round(len(at_risk) / len(df) * 100, 1)
    
    st.metric("Utilisateurs √† risque de d√©sengagement (30j)", f"{at_risk_pct}%",
              delta=f"{at_risk_pct - 8.7:.1f}%" if at_risk_pct > 8.7 else f"{8.7 - at_risk_pct:.1f}%",
              delta_color="inverse")
    
    # Cr√©er un indicateur de risque global
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = at_risk_pct + disengaged_pct,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': "Indice de risque global", 'font': {'size': 24}},
        delta = {'reference': 15, 'increasing': {'color': "red"}, 'decreasing': {'color': "green"}},
        gauge = {
            'axis': {'range': [None, 30], 'tickwidth': 1, 'tickcolor': "darkblue"},
            'bar': {'color': "darkred"},
            'bgcolor': "white",
            'borderwidth': 2,
            'bordercolor': "gray",
            'steps': [
                {'range': [0, 10], 'color': 'lightgreen'},
                {'range': [10, 20], 'color': 'orange'},
                {'range': [20, 30], 'color': 'salmon'}],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': at_risk_pct + disengaged_pct}}))
    
    fig.update_layout(height=300)
    st.plotly_chart(fig, use_container_width=True)
    
    # Analyse des facteurs de d√©sengagement
    st.markdown("### Facteurs de d√©sengagement")
    
    # Simuler des facteurs de d√©sengagement (√† remplacer par des donn√©es r√©elles)
    factors = {
        "Inactivit√© prolong√©e (>30 jours)": 42,
        "Faible interaction avec le contenu": 28,
        "Taux de rebond √©lev√©": 15,
        "Absence d'inscription newsletter": 10,
        "Autres facteurs": 5
    }
    
    factors_df = pd.DataFrame({
        'Facteur': list(factors.keys()),
        'Pourcentage': list(factors.values())
    })
    
    fig = px.pie(
        factors_df,
        values='Pourcentage',
        names='Facteur',
        title="Principaux facteurs de d√©sengagement",
        hole=0.4,
        color_discrete_sequence=px.colors.sequential.Reds_r
    )
    
    st.plotly_chart(fig, use_container_width=True)

# Recommandations marketing personnalis√©es
st.subheader("üéØ Recommandations Marketing Personnalis√©es")

# S√©lection du cluster pour afficher les recommandations
selected_cluster = st.selectbox(
    "S√©lectionnez un segment pour voir les recommandations d√©taill√©es :",
    sorted(df['cluster'].unique()),
    format_func=lambda x: f"Segment {x} - {cluster_profiles.get(x, {}).get('title', 'Non d√©fini')}"
)

# Affichage des recommandations pour le cluster s√©lectionn√©
if selected_cluster in cluster_profiles:
    profile = cluster_profiles[selected_cluster]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader(f"Strat√©gie pour Segment {selected_cluster}: {profile['title']}")
        st.markdown(f"**Effectif :** {profile['size']}")
        st.markdown(f"**Description :** {profile['description']}")
        st.markdown(f"**Strat√©gie principale :** {profile['strategy']}")
        
        st.markdown("**Actions recommand√©es :**")
        for action in profile['actions']:
            st.markdown(f"- {action}")
    
    with col2:
        st.markdown("**KPIs √† surveiller :**")
        for kpi in profile['kpis']:
            st.markdown(f"- {kpi}")
        
        st.markdown("**Types de contenu recommand√©s :**")
        for content in profile['content_types']:
            st.markdown(f"- {content}")
        
        # Ajouter un bouton pour g√©n√©rer un plan d'action d√©taill√©
        if st.button("üìù G√©n√©rer un plan d'action d√©taill√©", key=f"plan_{selected_cluster}"):
            st.success("‚úÖ Plan d'action g√©n√©r√© et disponible pour t√©l√©chargement")
            
            # Cr√©er le contenu du plan d'action
            plan_content = f"# Plan d'action marketing - Segment {selected_cluster}: {profile['title']}\n\n"
            plan_content += f"Date de g√©n√©ration: {current_date.strftime('%d/%m/%Y')}\n\n"
            plan_content += f"## Description du segment\n\n{profile['description']}\n\n"
            plan_content += f"## Strat√©gie principale\n\n{profile['strategy']}\n\n"
            
            plan_content += "## Actions recommand√©es\n\n"
            for i, action in enumerate(profile['actions'], 1):
                plan_content += f"{i}. {action}\n"
            
            plan_content += "\n## KPIs √† surveiller\n\n"
            for i, kpi in enumerate(profile['kpis'], 1):
                plan_content += f"{i}. {kpi}\n"
            
            plan_content += "\n## Types de contenu recommand√©s\n\n"
            for i, content in enumerate(profile['content_types'], 1):
                plan_content += f"{i}. {content}\n"
            
            plan_content += "\n## Calendrier de d√©ploiement\n\n"
            plan_content += "- Semaine 1: Pr√©paration et configuration\n"
            plan_content += "- Semaine 2: Lancement des premi√®res actions\n"
            plan_content += "- Semaines 3-4: Suivi et optimisation\n"
            plan_content += "- Mois 2: Analyse des r√©sultats et ajustements\n"
            
            st.download_button(
                label="‚¨áÔ∏è T√©l√©charger le plan d'action",
                data=plan_content,
                file_name=f"plan_action_segment_{selected_cluster}.md",
                mime="text/markdown"
            )

# Analyse des tendances d'engagement
st.subheader("üìà Tendances d'engagement")

col1, col2 = st.columns(2)

with col1:
    # Simuler des donn√©es de tendance d'engagement
    months = ["Jan", "F√©v", "Mar", "Avr"]
    engagement_trend = pd.DataFrame({
        'Mois': months,
        'Score moyen': [42.3, 44.1, 45.8, 47.2],
        'Utilisateurs actifs': [58.2, 59.7, 61.5, 63.8]
    })
    
    fig = px.line(
        engagement_trend,
        x='Mois',
        y=['Score moyen', 'Utilisateurs actifs'],
        title="√âvolution de l'engagement (2025)",
        markers=True
    )
    st.plotly_chart(fig, use_container_width=True)

with col2:
    # Simuler des donn√©es de conversion par segment
    conversion_data = []
    for cluster in sorted(df['cluster'].unique()):
        if cluster in cluster_profiles:
            # Simuler un taux de conversion bas√© sur le profil du cluster
            if cluster in ['7', '6']:
                conversion_rate = np.random.uniform(15, 25)
            elif cluster in ['3_1', '4', '5']:
                conversion_rate = np.random.uniform(8, 15)
            elif cluster in ['0', '1', '2', '3_2']:
                conversion_rate = np.random.uniform(1, 8)
            else:
                conversion_rate = np.random.uniform(5, 10)
            
            conversion_data.append({
                'Segment': f"{cluster}: {cluster_profiles[cluster]['title']}",
                'Taux de conversion (%)': round(conversion_rate, 1)
            })
    
    conversion_df = pd.DataFrame(conversion_data)
    
    fig = px.bar(
        conversion_df,
        x='Segment',
        y='Taux de conversion (%)',
        title="Taux de conversion par segment",
        color='Taux de conversion (%)',
        color_continuous_scale='Greens'
    )
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)

# Opportunit√©s de croissance
st.subheader("üöÄ Opportunit√©s de croissance")

col1, col2, col3 = st.columns(3)

with col1:
    st.info("üìö **Contenus √† d√©velopper en priorit√©**")
    st.markdown("1. S√©ries de tutoriels Data Science pour d√©butants")
    st.markdown("2. Cas d'√©tudes sectoriels (Finance, Sant√©, Retail)")
    st.markdown("3. Webinaires avanc√©s sur les techniques de ML")
    st.markdown("4. Datasets comment√©s pour pratique guid√©e")
    st.markdown("5. Forums th√©matiques anim√©s par des experts")

with col2:
    st.info("üéØ **Segments √† fort potentiel**")
    st.markdown("1. **Segment 3_1** - Actifs avec Fort Potentiel")
    st.markdown("   *Conversion vers contribution communautaire*")
    st.markdown("2. **Segment 4** - Bonne Interaction G√©n√©rale")
    st.markdown("   *Diversification des domaines d'expertise*")
    st.markdown("3. **Segment 6** - Tr√®s Actif et Intense")
    st.markdown("   *Programme ambassadeur et mentorat*")

with col3:
    st.info("üí° **Actions rapides √† impact √©lev√©**")
    st.markdown("1. Campagne email cibl√©e pour Segment 1")
    st.markdown("2. Data Challenge mensuel pour Segments 3_1 et 6")
    st.markdown("3. Programme de reconnaissance pour Segment 7")
    st.markdown("4. Webinaires d'introduction pour Segment 0")
    st.markdown("5. Refonte UX des pages d'entr√©e principales")

# Pied de page
st.markdown("---")
st.info("‚¨ÖÔ∏è Utilisez le menu de gauche pour explorer chaque fonctionnalit√© en d√©tail.")

# Sidebar pour la navigation
st.sidebar.title("üß≠ Navigation")
st.sidebar.markdown("---")

# Ajout d'un logo Management & Data Science (simul√©)
st.sidebar.markdown("### Management & Data Science")
st.sidebar.markdown("*Plateforme collaborative francophone d√©di√©e √† la data science et au management*")

# Informations suppl√©mentaires dans la sidebar
st.sidebar.markdown("---")
st.sidebar.subheader("üìä Statistiques Rapides")
st.sidebar.write(f"Nombre total d'utilisateurs: **{len(df):,}**")
st.sidebar.write(f"Nombre de segments: **{len(df['cluster'].unique())}**")
st.sidebar.write(f"Utilisateurs actifs: **{active_pct}%**")
st.sidebar.write(f"Score d'engagement moyen: **{avg_engagement}**")

# Ajout d'un filtre de date
st.sidebar.markdown("---")
st.sidebar.subheader("‚è±Ô∏è Filtre Temporel")
date_options = ["7 derniers jours", "30 derniers jours", "90 derniers jours", "Ann√©e en cours"]
selected_date = st.sidebar.selectbox("P√©riode d'analyse:", date_options)
st.sidebar.markdown(f"Donn√©es filtr√©es sur: **{selected_date}**")

# Ajout d'un filtre par pays
countries = ['Tous'] + sorted(df['country'].dropna().unique().tolist())
selected_country = st.sidebar.selectbox("Filtrer par pays:", countries)
if selected_country != 'Tous':
    st.sidebar.markdown(f"Pays s√©lectionn√©: **{selected_country}**")

# Ajout d'un filtre par type de contenu
content_types = ['Tous', 'Articles', 'Datasets', 'Cours', 'Projets', 'Forums']
selected_content = st.sidebar.selectbox("Type de contenu:", content_types)
if selected_content != 'Tous':
    st.sidebar.markdown(f"Contenu filtr√©: **{selected_content}**")

# Actions rapides
st.sidebar.markdown("---")
st.sidebar.subheader("‚ö° Actions Rapides")

if st.sidebar.button("üìß Cr√©er une campagne email"):
    st.sidebar.success("‚úÖ Redirection vers le module de cr√©ation de campagne")

if st.sidebar.button("üìä Exporter les donn√©es"):
    st.sidebar.success("‚úÖ Donn√©es export√©es avec succ√®s")

if st.sidebar.button("üîÑ Actualiser les donn√©es"):
    st.sidebar.info("üîÑ Actualisation en cours...")
    st.sidebar.success("‚úÖ Donn√©es actualis√©es")
