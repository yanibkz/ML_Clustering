import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import joblib
import warnings
from datetime import datetime, timedelta

warnings.filterwarnings('ignore')

# Configuration de la page
st.set_page_config(
    page_title="üîç Analyse Utilisateur",
    page_icon="üéØ",
    layout="wide"
)

# Chargement des donn√©es
@st.cache_data
def load_data():
    try:
        df = pd.read_csv('final_df.csv')
        # Convertir les colonnes probl√©matiques en string
        for col in ['user_name', 'user_email', 'country', 'host', 'medium']:
            if col in df.columns:
                df[col] = df[col].astype(str)
        return df
    except FileNotFoundError:
        st.error("Fichier de donn√©es non trouv√©. Veuillez v√©rifier le chemin du fichier.")
        st.stop()

# Chargement du mod√®le de pr√©diction
@st.cache_resource
def load_model():
    try:
        model = joblib.load('rf_pipeline.pkl')
        return model
    except FileNotFoundError:
        st.warning("Mod√®le de pr√©diction non trouv√©. Certaines fonctionnalit√©s de pr√©diction seront d√©sactiv√©es.")
        return None

# Chargement des donn√©es et du mod√®le
df = load_data()
model = load_model()

# Chargement des mod√®les de clustering
main_pipeline = joblib.load("main_clustering_pipeline.pkl")
sub_kmeans = joblib.load("sub_clustering_model.pkl")
num_cols = [
    'nb_sessions','avg_pageviews','nb_clicks','clicks_per_session','click_frequency',
    'recency_days','avg_days_between_sessions','avg_prior_sessions','session_efficiency',
    'engagement_score','global_engagement_score','engagement_intensity',
    'multi_interaction_score','engagement_trend','retention_like_score','executive_weighted_score',
    'bounce_rate','nb_entry_pages','entry_pages_per_session','unique_clicks_ratio',
    'pageview_click_ratio','diversity_score','regularity_score'
]

# Appliquer le pipeline principal
df['cluster'] = main_pipeline.predict(df[num_cols]).astype(str)

# Identifier les points du cluster 3
mask_cluster_3 = df['cluster'] == '3'
if mask_cluster_3.sum() > 0:
    # Pr√©traiter les donn√©es du cluster 3
    X_cluster_3 = df.loc[mask_cluster_3, num_cols]
    X_cluster_3_processed = main_pipeline.named_steps['prep'].transform(X_cluster_3)
    
    # Appliquer le sous-clustering
    sub_labels = sub_kmeans.predict(X_cluster_3_processed)
    
    # R√©cup√©rer les indices des points du cluster 3
    cluster_3_indices = df[mask_cluster_3].index.to_numpy()
    
    # Pour chaque sous-cluster, mettre √† jour les √©tiquettes
    for s in range(2):  # 2 sous-clusters
        sub_idx = cluster_3_indices[sub_labels == s]
        df.loc[sub_idx, 'cluster'] = f"3_{s+1}"

# Dictionnaire des profils de clusters d√©taill√©s pour Management & Data Science
cluster_profiles = {
    '0': {
        'title': "Faiblement Engag√©, Passif",
        'description': "Utilisateur avec un faible engagement et peu d'interactions, principalement issu de recherche organique.",
        'interests': ["Concepts fondamentaux de data science", "Introduction √† l'analyse de donn√©es", "Tutoriels de base"],
        'recommendations': [
            "S√©rie 'Data Science pour tous' - Introduction aux concepts fondamentaux",
            "Guide √©tape par √©tape pour d√©buter en analyse de donn√©es",
            "Webinaire d'introduction : Les bases de la data science en entreprise"
        ],
        'content_types': ["Articles introductifs", "Vid√©os explicatives", "Infographies simplifi√©es"],
        'email_template': {
            'subject': "üîç D√©couvrez les fondamentaux de la Data Science en 5 minutes",
            'content': "Bonjour,\n\nNous avons s√©lectionn√© pour vous une introduction aux concepts fondamentaux de la Data Science, adapt√©e √† votre niveau.\n\nD√©couvrez notre s√©rie de contenus 'Data Science pour tous' et commencez votre parcours d'apprentissage d√®s aujourd'hui."
        }
    },
    '1': {
        'title': "Passif √† Risque √©lev√© de D√©sengagement",
        'description': "Utilisateur avec un engagement tr√®s limit√© et des interactions mod√©r√©es sans profondeur.",
        'interests': ["Cas d'√©tudes sectoriels", "Applications pratiques", "Contenus courts et accessibles"],
        'recommendations': [
            "Cas d'√©tude : Impact de la data science dans votre secteur",
            "Mini-formation : 15 minutes par jour pour progresser en data science",
            "S√©lection personnalis√©e d'articles courts bas√©s sur vos centres d'int√©r√™t"
        ],
        'content_types': ["Cas d'√©tudes", "Tutoriels courts", "Newsletters cibl√©es"],
        'email_template': {
            'subject': "üîÑ Voici ce que vous avez manqu√© sur Management & Data Science",
            'content': "Bonjour,\n\nDepuis votre derni√®re visite, notre communaut√© a partag√© de nombreux contenus qui pourraient vous int√©resser.\n\nVoici une s√©lection personnalis√©e bas√©e sur vos centres d'int√©r√™t :\n\n- Cas d'√©tude : Impact de la Data Science dans votre secteur\n- Nouveaux datasets disponibles pour vos analyses\n- Discussions actives sur les sujets qui vous passionnent"
        }
    },
    '2': {
        'title': "Tr√®s Faible Engagement",
        'description': "Utilisateur avec un engagement tr√®s faible et peu d'interactions.",
        'interests': ["Contenus simplifi√©s", "Success stories", "Applications concr√®tes"],
        'recommendations': [
            "Data Science simplifi√©e : comprendre les concepts cl√©s en 5 minutes",
            "Success stories : comment la data science a transform√© ces entreprises",
            "Acc√®s premium temporaire : d√©couvrez nos contenus exclusifs"
        ],
        'content_types': ["Vid√©os courtes", "Infographies", "T√©moignages"],
        'email_template': {
            'subject': "üéÅ Acc√®s premium offert : Red√©couvrez Management & Data Science",
            'content': "Bonjour,\n\nNous vous offrons un acc√®s temporaire √† tous nos contenus premium pour vous permettre de red√©couvrir la valeur de Management & Data Science.\n\nVoici ce que vous pourrez explorer :\n\n- √âtudes de cas compl√®tes avec code source\n- Datasets exclusifs pour vos analyses\n- Formations vid√©o sur les techniques avanc√©es"
        }
    },
    '3_1': {
        'title': "Actif avec Fort Potentiel",
        'description': "Utilisateur avec un bon engagement et une bonne interactivit√©, pr√™t √† approfondir ses connaissances.",
        'interests': ["Data challenges", "Projets collaboratifs", "Contenus avanc√©s"],
        'recommendations': [
            "Data Challenge : Analyse pr√©dictive sur donn√©es r√©elles",
            "Webinaire avanc√© : Techniques de machine learning pour professionnels",
            "Parcours th√©matique : Sp√©cialisation en NLP pour data scientists"
        ],
        'content_types': ["Projets pratiques", "Webinaires avanc√©s", "Forums sp√©cialis√©s"],
        'email_template': {
            'subject': "üèÜ Rejoignez notre programme Data Leaders et partagez votre expertise",
            'content': "Bonjour,\n\nVotre activit√© sur Management & Data Science vous place parmi nos utilisateurs les plus engag√©s.\n\nNous vous invitons √† rejoindre notre programme Data Leaders qui vous permettra de :\n\n- Participer √† nos Data Challenges exclusifs\n- Obtenir des badges de reconnaissance pour vos contributions\n- Acc√©der en avant-premi√®re √† nos nouveaux contenus"
        }
    },
    '3_2': {
        'title': "Moyennement Actif mais Sous-exploit√©",
        'description': "Utilisateur avec un engagement moyen et des interactions moyennes, avec un potentiel inexploit√©.",
        'interests': ["Datasets pratiques", "Discussions th√©matiques", "Mini-challenges"],
        'recommendations': [
            "S√©lection de datasets pour pratiquer vos comp√©tences",
            "Communaut√© : rejoignez les discussions sur l'IA g√©n√©rative",
            "Mini-challenge : optimisation d'algorithmes de clustering"
        ],
        'content_types': ["Datasets comment√©s", "Forums de discussion", "Exercices pratiques"],
        'email_template': {
            'subject': "üìä Ressources recommand√©es pour approfondir vos connaissances",
            'content': "Bonjour,\n\nBas√© sur votre activit√© r√©cente, nous avons s√©lectionn√© des ressources qui pourraient vous aider √† approfondir vos connaissances en data science.\n\nVoici nos recommandations personnalis√©es :\n\n- Articles interm√©diaires sur les techniques de clustering\n- Datasets r√©cents dans votre domaine\n- Mini-challenge adapt√© √† votre niveau"
        }
    },
    '4': {
        'title': "Bonne Interaction G√©n√©rale",
        'description': "Utilisateur avec un engagement √©lev√© mais des interactions moyennes, pr√™t √† diversifier ses connaissances.",
        'interests': ["Nouveaux domaines", "Partage de connaissances", "Collaborations"],
        'recommendations': [
            "D√©couvrez de nouveaux domaines : Data Science pour la finance",
            "Atelier pratique : partager vos connaissances avec la communaut√©",
            "Collaborations : projets ouverts recherchant des contributeurs"
        ],
        'content_types': ["Articles sp√©cialis√©s", "Ateliers pratiques", "Projets collaboratifs"],
        'email_template': {
            'subject': "üåü Explorez de nouveaux domaines de la Data Science",
            'content': "Bonjour,\n\nVotre engagement sur Management & Data Science est excellent, et nous pensons que vous pourriez √™tre int√©ress√© par l'exploration de nouveaux domaines connexes.\n\nVoici des suggestions bas√©es sur votre profil :\n\n- Data Science pour la Finance: Articles et ressources\n- NLP: Projets pratiques pour d√©velopper vos comp√©tences\n- Opportunit√©s de partager votre expertise dans vos domaines de pr√©dilection"
        }
    },
    '5': {
        'title': "Petit Groupe Actif",
        'description': "Utilisateur engag√© avec un bon potentiel d'approfondissement, int√©ress√© par des contenus de niche.",
        'interests': ["Contenus sp√©cialis√©s", "Groupes d'experts", "Publications"],
        'recommendations': [
            "Contenu sp√©cialis√© : Techniques avanc√©es de feature engineering",
            "Groupe d'experts : rejoignez la discussion sur l'√©thique en IA",
            "Publication : opportunit√©s de partager votre expertise"
        ],
        'content_types': ["Articles de niche", "Groupes sp√©cialis√©s", "Opportunit√©s de publication"],
        'email_template': {
            'subject': "üëë Invitation √† rejoindre notre groupe d'experts",
            'content': "Bonjour,\n\nVotre expertise et votre engagement sur Management & Data Science vous distinguent.\n\nNous vous invitons √† rejoindre notre groupe d'experts o√π vous pourrez :\n\n- Participer √† des discussions sp√©cialis√©es avec d'autres experts\n- Contribuer √† la cr√©ation de contenus de niche\n- √ätre reconnu comme expert dans votre domaine"
        }
    },
    '6': {
        'title': "Tr√®s Actif et Intense",
        'description': "Utilisateur tr√®s actif avec une forte intensit√© d'engagement et des interactions tr√®s √©lev√©es.",
        'interests': ["Acc√®s anticip√©", "Mentorat", "√âv√©nements exclusifs"],
        'recommendations': [
            "Acc√®s anticip√© : nouvelles fonctionnalit√©s de la plateforme",
            "Programme de mentorat : devenez animateur th√©matique",
            "√âv√©nement exclusif : rencontre avec des experts du domaine"
        ],
        'content_types': ["Contenus exclusifs", "√âv√©nements VIP", "Opportunit√©s de mentorat"],
        'email_template': {
            'subject': "üîë Acc√®s VIP : Programme Data Science Influencers",
            'content': "Bonjour,\n\nF√©licitations ! Votre activit√© exceptionnelle sur Management & Data Science vous qualifie pour notre programme VIP 'Data Science Influencers'.\n\nVos avantages exclusifs :\n\n- Acc√®s anticip√© aux nouvelles fonctionnalit√©s et contenus\n- Invitations √† des √©v√©nements priv√©s avec des experts du domaine\n- Opportunit√©s de collaboration sur des projets strat√©giques\n- Badge VIP visible sur votre profil"
        }
    },
    '7': {
        'title': "Petit Groupe Ultra-Engag√©",
        'description': "Utilisateur d'√©lite avec un engagement exceptionnel et une tr√®s forte intensit√©, ambassadeur potentiel.",
        'interests': ["Co-cr√©ation", "Ambassadeur", "√âv√©nements VIP"],
        'recommendations': [
            "Programme Ambassadeur : co-cr√©ation de contenus premium",
            "Interview : partagez votre expertise avec notre communaut√©",
            "√âv√©nement VIP : table ronde sur l'avenir de la data science"
        ],
        'content_types': ["Co-cr√©ation de contenu", "Interviews", "Tables rondes"],
        'email_template': {
            'subject': "üå† Devenez Ambassadeur Management & Data Science",
            'content': "Bonjour,\n\nVous faites partie du cercle tr√®s restreint de nos utilisateurs les plus engag√©s et nous souhaitons vous proposer une relation privil√©gi√©e avec notre √©quipe.\n\nEn tant qu'Ambassadeur, vous b√©n√©ficierez de :\n\n- Un canal de communication direct avec notre √©quipe de direction\n- Des opportunit√©s de co-cr√©ation de contenus et fonctionnalit√©s\n- Une mise en avant de votre expertise via des interviews et t√©moignages\n- Des avantages exclusifs r√©serv√©s aux Ambassadeurs"
        }
    }
}

# En-t√™te de la page
st.title("üîç Analyse Utilisateur Individuelle")
st.markdown("### Exploration d√©taill√©e du profil d'un utilisateur de Management & Data Science")

# Banni√®re de fonctionnalit√©s √† venir
st.info("üöÄ **Nouvelles fonctionnalit√©s √† venir :** Analyse pr√©dictive avanc√©e, Parcours utilisateur d√©taill√© et Recommandations IA personnalis√©es. Restez connect√©s !")

# S√©lection de l'utilisateur
col1, col2 = st.columns([1, 3])

with col1:
    # Option de recherche par ID ou par filtres
    search_method = st.radio(
        "M√©thode de recherche",
        ["ID Utilisateur", "Filtres avanc√©s"]
    )
    
    if search_method == "ID Utilisateur":
        # Conversion explicite en string pour √©viter les probl√®mes
        visitor_ids = df['visitor_id'].astype(str).tolist()
        user_id = st.selectbox(
            "S√©lectionnez un ID utilisateur",
            visitor_ids
        )
        # Utilisation de la comparaison de strings
        user_data = df[df['visitor_id'].astype(str) == user_id].iloc[0]
    
    else:  # Filtres avanc√©s
        # Filtres pour trouver un utilisateur
        cluster_filter = st.selectbox(
            "Cluster",
            sorted(df['cluster'].unique()),
            format_func=lambda x: f"Cluster {x} - {cluster_profiles.get(x, {}).get('title', 'Non d√©fini')}"
        )
        
        engagement_filter = st.slider(
            "Score d'engagement minimum",
            min_value=0,
            max_value=100,
            value=50
        )
        
        is_active_filter = st.checkbox("Utilisateurs actifs uniquement", value=False)
        
        # Application des filtres
        filtered_df = df[df['cluster'] == cluster_filter]
        filtered_df = filtered_df[filtered_df['engagement_score'] >= engagement_filter]
        
        if is_active_filter:
            filtered_df = filtered_df[filtered_df['is_active'] == 1]
        
        if len(filtered_df) > 0:
            # Conversion en string pour √©viter les probl√®mes
            visitor_ids = filtered_df['visitor_id'].astype(str).tolist()
            user_id = st.selectbox(
                "S√©lectionnez un utilisateur parmi les r√©sultats filtr√©s",
                visitor_ids
            )
            user_data = df[df['visitor_id'].astype(str) == user_id].iloc[0]
        else:
            st.warning("Aucun utilisateur ne correspond aux crit√®res s√©lectionn√©s.")
            st.stop()

# Affichage des informations utilisateur
st.subheader(f"üë§ Profil de l'utilisateur: {user_data['visitor_id']}")

# M√©triques principales avec couleurs adapt√©es
col1, col2, col3, col4 = st.columns(4)

with col1:
    cluster_label = user_data['cluster']
    cluster_title = cluster_profiles.get(cluster_label, {}).get('title', 'Non d√©fini')
    st.metric("Segment", f"{cluster_label} - {cluster_title}")

with col2:
    engagement_score = user_data['engagement_score']
    engagement_delta = engagement_score - df['engagement_score'].mean()
    st.metric("Score d'engagement", f"{engagement_score:.2f}", f"{engagement_delta:.2f} vs moyenne")

with col3:
    status = "Actif" if user_data['is_active'] == 1 else "Inactif"
    status_icon = "‚úÖ" if user_data['is_active'] == 1 else "‚ùå"
    st.metric("Statut", f"{status_icon} {status}")

with col4:
    risk = "√âlev√©" if user_data['will_disengage_30d'] == 1 else "Faible"
    risk_icon = "‚ö†Ô∏è" if user_data['will_disengage_30d'] == 1 else "‚úÖ"
    st.metric("Risque de d√©sengagement", f"{risk_icon} {risk}")

# R√©sum√© du profil utilisateur
user_cluster = user_data['cluster']
if user_cluster in cluster_profiles:
    profile = cluster_profiles[user_cluster]
    st.info(f"**Profil utilisateur :** {profile['description']}")

# Onglets pour organiser les informations
tabs = st.tabs(["üìä Comportement", "üë• Profil d√©taill√©", "üîÆ Pr√©dictions", "üìà Historique", "üéØ Actions recommand√©es", "üöÄ Fonctionnalit√©s √† venir"])

with tabs[0]:  # Comportement
    col1, col2 = st.columns(2)
    
    with col1:
        # Tableau des m√©triques d'engagement
        st.subheader("M√©triques d'engagement")
        engagement_metrics = [
            'engagement_score', 'global_engagement_score', 'engagement_intensity',
            'multi_interaction_score', 'engagement_trend', 'session_efficiency',
            'retention_like_score', 'executive_weighted_score'
        ]
        
        engagement_df = pd.DataFrame({
            'M√©trique': engagement_metrics,
            'Valeur': [user_data[metric] for metric in engagement_metrics]
        })
        
        st.dataframe(engagement_df, use_container_width=True)
        
        # Informations sur les sessions
        st.subheader("üñ•Ô∏è Activit√© sur la plateforme")
        
        session_metrics = [
            'nb_sessions', 'avg_pageviews', 'bounce_rate', 'recency_days',
            'avg_days_between_sessions', 'nb_clicks', 'nb_unique_elements_clicked',
            'nb_entry_pages'
        ]
        
        session_df = pd.DataFrame({
            'M√©trique': session_metrics,
            'Valeur': [user_data[metric] for metric in session_metrics]
        })
        
        st.dataframe(session_df, use_container_width=True)
    
    with col2:
        # Comparaison avec la moyenne du cluster
        st.subheader(f"Comparaison avec le segment {user_cluster}")
        
        # Prendre uniquement les colonnes num√©riques pour √©viter l'erreur
        num_cols = df.select_dtypes(include=[np.number]).columns
        cluster_avg = df[df['cluster'] == user_cluster][num_cols].mean()
        
        comparison_metrics = [
            'engagement_score', 'global_engagement_score', 'engagement_intensity',
            'multi_interaction_score', 'session_efficiency'
        ]
        
        comparison_df = pd.DataFrame({
            'M√©trique': comparison_metrics,
            'Utilisateur': [user_data[metric] for metric in comparison_metrics],
            'Moyenne Segment': [cluster_avg.get(metric, 0) for metric in comparison_metrics]
        })
        
        # Cr√©ation d'un graphique √† barres pour la comparaison
        fig = px.bar(
            comparison_df,
            x='M√©trique',
            y=['Utilisateur', 'Moyenne Segment'],
            barmode='group',
            title=f"Comparaison avec la moyenne du segment {user_cluster}",
            color_discrete_sequence=['#3366CC', '#DC3912'],
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Graphique radar pour visualiser le profil utilisateur
        st.subheader("Profil d'engagement")
        categories = comparison_metrics
        
        # Normalisation des valeurs pour le radar chart
        user_values = [float(user_data[cat]) for cat in categories]
        cluster_values = [float(cluster_avg.get(cat, 0)) for cat in categories]
        
        # Trouver le maximum pour chaque m√©trique dans tout le dataset
        max_values = [float(df[cat].max()) if cat in df.columns else 1 for cat in categories]
        
        # Normaliser les valeurs
        user_normalized = [user_values[i]/max_values[i] if max_values[i] > 0 else 0 for i in range(len(categories))]
        cluster_normalized = [cluster_values[i]/max_values[i] if max_values[i] > 0 else 0 for i in range(len(categories))]
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatterpolar(
            r=user_normalized,
            theta=categories,
            fill='toself',
            name='Utilisateur',
            line=dict(color='#3366CC')
        ))
        
        fig.add_trace(go.Scatterpolar(
            r=cluster_normalized,
            theta=categories,
            fill='toself',
            name=f'Moyenne Segment {user_cluster}',
            line=dict(color='#DC3912')
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 1]
                )
            ),
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True)

with tabs[1]:  # Profil d√©taill√©
    col1, col2 = st.columns(2)
    
    with col1:
        # Informations utilisateur - Gestion s√©curis√©e des valeurs
        st.subheader("Informations personnelles")
        user_info = {}
        
        # Traitement s√©curis√© de user_name
        if pd.notna(user_data['user_name']):
            user_name = str(user_data['user_name'])
            user_info['Nom'] = user_name if user_name != '(Visiteur)' else 'Non renseign√©'
        else:
            user_info['Nom'] = 'Non renseign√©'
        
        # Traitement s√©curis√© de user_email
        if pd.notna(user_data['user_email']):
            user_email = str(user_data['user_email'])
            user_info['Email'] = user_email if user_email != '(not set)' else 'Non renseign√©'
        else:
            user_info['Email'] = 'Non renseign√©'
        
        # Traitement s√©curis√© de country
        if pd.notna(user_data['country']):
            country = str(user_data['country'])
            user_info['Pays'] = country if country != '(not set)' else 'Non renseign√©'
        else:
            user_info['Pays'] = 'Non renseign√©'
        
        # Traitement s√©curis√© de host
        if pd.notna(user_data['host']):
            host = str(user_data['host'])
            user_info['Fournisseur'] = host if host != '(not set)' else 'Non renseign√©'
        else:
            user_info['Fournisseur'] = 'Non renseign√©'
        
        # Traitement s√©curis√© de medium
        if pd.notna(user_data['medium']):
            medium = str(user_data['medium'])
            user_info['Source'] = medium if medium != '(not set)' else 'Non renseign√©'
        else:
            user_info['Source'] = 'Non renseign√©'
        
        for key, value in user_info.items():
            st.write(f"**{key}:** {value}")
        
        # Date de derni√®re visite
        st.write(f"**Derni√®re visite:** {user_data['full_date']}")
        
        # Prochaine visite pr√©vue
        st.write(f"**Prochaine visite pr√©vue:** {user_data['next_full_date']}")
        
        # Centres d'int√©r√™t bas√©s sur le cluster
        if user_cluster in cluster_profiles:
            st.subheader("Centres d'int√©r√™t probables")
            for interest in cluster_profiles[user_cluster]['interests']:
                st.write(f"- {interest}")
    
    with col2:
        # Types de contenu pr√©f√©r√©s
        if user_cluster in cluster_profiles:
            st.subheader("Types de contenu pr√©f√©r√©s")
            for content_type in cluster_profiles[user_cluster]['content_types']:
                st.write(f"- {content_type}")
        
        # Emplacement pour future fonctionnalit√© : Analyse de l'activit√© par jour
        st.subheader("Analyse temporelle")
        st.markdown("üìÖ **Analyse de l'activit√© par jour de la semaine**")
        
        # V√©rifier si les donn√©es existent
        if 'dayofweek' in df.columns and pd.notna(user_data['dayofweek']):
            # Utiliser les donn√©es r√©elles
            day_data = user_data['dayofweek']
            st.write(f"Jour de derni√®re activit√©: **{day_data}**")
            
            # Afficher un message pour la future fonctionnalit√©
            st.info("üîú **Bient√¥t disponible :** Visualisation compl√®te de l'activit√© par jour de la semaine")
        else:
            st.info("üîú **Bient√¥t disponible :** Analyse de l'activit√© par jour de la semaine")
        
        # Emplacement pour future fonctionnalit√© : Analyse des heures de connexion
        st.markdown("üïí **Analyse des heures de connexion pr√©f√©r√©es**")
        
        # V√©rifier si les donn√©es existent
        if 'hour' in df.columns and pd.notna(user_data['hour']):
            # Utiliser les donn√©es r√©elles
            hour_data = user_data['hour']
            st.write(f"Heure de derni√®re activit√©: **{hour_data}h**")
            
            # Afficher un message pour la future fonctionnalit√©
            st.info("üîú **Bient√¥t disponible :** Visualisation compl√®te des heures de connexion pr√©f√©r√©es")
        else:
            st.info("üîú **Bient√¥t disponible :** Analyse des heures de connexion pr√©f√©r√©es")
        
        # Emplacement pour future fonctionnalit√© : Badges et r√©compenses
        st.subheader("Badges et r√©compenses")
        st.info("üîú **Bient√¥t disponible :** Syst√®me de badges et r√©compenses bas√© sur l'activit√© et les contributions")
        
        # Afficher un exemple de badge √† venir
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("ü•â **Bronze**")
        with col2:
            st.markdown("ü•à **Argent**")
        with col3:
            st.markdown("ü•á **Or**")

with tabs[2]:  # Pr√©dictions
    col1, col2 = st.columns(2)
    
    with col1:
        # Pr√©diction avec le mod√®le
        st.subheader("üîÆ Pr√©diction de d√©sengagement")
        
        if model is not None:
            # Pr√©paration des donn√©es pour la pr√©diction
            features = [
                'day', 'month', 'weekofyear', 'is_weekend',
                'quarter', 'semester', 'year', 'executive_weighted_score'
            ]
            
            # V√©rification que toutes les features sont pr√©sentes
            available_features = [f for f in features if f in df.columns]
            
            if len(available_features) == len(features):
                # Cr√©ation d'un DataFrame avec les donn√©es de l'utilisateur
                user_df = pd.DataFrame([user_data[features]])
                
                # Pr√©diction
                try:
                    prediction_proba = model.predict_proba(user_df)[:, 1][0]
                    prediction = model.predict(user_df)[0]
                    
                    # Affichage de la pr√©diction
                    st.write(f"**Probabilit√© de d√©sengagement:** {prediction_proba:.2%}")
                    
                    # Jauge de risque
                    fig = go.Figure(go.Indicator(
                        mode = "gauge+number",
                        value = prediction_proba * 100,
                        domain = {'x': [0, 1], 'y': [0, 1]},
                        title = {'text': "Risque de d√©sengagement"},
                        gauge = {
                            'axis': {'range': [0, 100]},
                            'bar': {'color': "darkred"},
                            'steps': [
                                {'range': [0, 30], 'color': "green"},
                                {'range': [30, 70], 'color': "orange"},
                                {'range': [70, 100], 'color': "red"}
                            ],
                            'threshold': {
                                'line': {'color': "red", 'width': 4},
                                'thickness': 0.75,
                                'value': prediction_proba * 100
                            }
                        }
                    ))
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Facteurs de risque
                    st.subheader("Facteurs de risque")
                    
                    risk_factors = []
                    if user_data['recency_days'] > 30:
                        risk_factors.append(f"‚ö†Ô∏è Inactivit√© prolong√©e ({user_data['recency_days']} jours)")
                    
                    if 'bounce_rate' in user_data and user_data['bounce_rate'] > 0.7:
                        risk_factors.append(f"‚ö†Ô∏è Taux de rebond √©lev√© ({user_data['bounce_rate']:.2f})")
                    
                    if user_data['engagement_trend'] < 0:
                        risk_factors.append(f"‚ö†Ô∏è Tendance d'engagement n√©gative ({user_data['engagement_trend']:.2f})")
                    
                    if user_data['nb_sessions'] < 3:
                        risk_factors.append(f"‚ö†Ô∏è Nombre de sessions faible ({user_data['nb_sessions']})")
                    
                    if not risk_factors:
                        risk_factors.append("‚úÖ Aucun facteur de risque majeur identifi√©")
                    
                    for factor in risk_factors:
                        st.write(factor)
                    
                except Exception as e:
                    st.error(f"Erreur lors de la pr√©diction: {e}")
            else:
                st.warning("Certaines caract√©ristiques n√©cessaires pour la pr√©diction ne sont pas disponibles dans les donn√©es.")
        else:
            st.info("Le mod√®le de pr√©diction n'est pas disponible. Impossible de g√©n√©rer des pr√©dictions.")
    
    with col2:
        # Pr√©diction de la prochaine visite
        st.subheader("üìÖ Pr√©diction de la prochaine visite")
        
        # Calculer la date estim√©e de la prochaine visite
        last_visit = pd.to_datetime(user_data['full_date'])
        avg_days = max(1, float(user_data['avg_days_between_sessions']) if pd.notna(user_data['avg_days_between_sessions']) else 7)
        
        # Ajuster la pr√©diction en fonction du risque de d√©sengagement
        if user_data['will_disengage_30d'] == 1:
            avg_days *= 1.5  # Augmenter l'intervalle si risque de d√©sengagement
        
        next_visit_prediction = last_visit + pd.Timedelta(days=avg_days)
        
        # Afficher la pr√©diction
        days_until_next = (next_visit_prediction - datetime.now()).days
        
        if days_until_next < 0:
            st.warning(f"‚ö†Ô∏è **Retard de visite:** L'utilisateur aurait d√ª revenir il y a {abs(days_until_next)} jours")
        else:
            st.info(f"üìÜ **Prochaine visite estim√©e:** {next_visit_prediction.strftime('%d/%m/%Y')} (dans {days_until_next} jours)")
        
        # Pr√©diction des int√©r√™ts
        st.subheader("üîç Centres d'int√©r√™t pr√©dits")
        
        if user_cluster in cluster_profiles:
            # Afficher les recommandations de contenu bas√©es sur le cluster
            for recommendation in cluster_profiles[user_cluster]['recommendations']:
                st.write(f"- {recommendation}")
        
        # Emplacement pour future fonctionnalit√© : Pr√©diction de valeur utilisateur
        st.subheader("üí∞ Valeur utilisateur")
        st.info("üîú **Bient√¥t disponible :** Estimation de la valeur utilisateur et du potentiel de croissance")
        
        # Afficher un aper√ßu de la future fonctionnalit√©
        st.markdown("**M√©triques √† venir :**")
        st.markdown("- Valeur actuelle estim√©e")
        st.markdown("- Potentiel de croissance")
        st.markdown("- Probabilit√© de conversion premium")
        st.markdown("- Impact sur la communaut√©")

with tabs[3]:  # Historique
    # Historique des interactions
    st.subheader("üìÖ Historique des interactions")
    
    # Cr√©ation d'un historique bas√© sur les donn√©es disponibles
    nb_sessions = int(user_data['nb_sessions'])
    
    if nb_sessions > 0:
        # Afficher les informations de session disponibles
        st.write(f"**Nombre total de sessions :** {nb_sessions}")
        st.write(f"**Derni√®re visite :** {user_data['full_date']}")
        st.write(f"**Temps moyen entre les sessions :** {user_data['avg_days_between_sessions']:.1f} jours")
        
        # Emplacement pour future fonctionnalit√© : Historique d√©taill√©
        st.info("üîú **Bient√¥t disponible :** Historique d√©taill√© des interactions avec dates, actions et dur√©es")
        
        # Aper√ßu du futur tableau d'historique
        st.markdown("**Aper√ßu du futur historique d√©taill√© :**")
        preview_df = pd.DataFrame({
            'Date': ["JJ/MM/AAAA", "JJ/MM/AAAA", "JJ/MM/AAAA"],
            'Action': ["Type d'action", "Type d'action", "Type d'action"],
            'Page': ["Section visit√©e", "Section visit√©e", "Section visit√©e"],
            'Dur√©e': ["XX min", "XX min", "XX min"]
        })
        st.dataframe(preview_df, use_container_width=True)
    else:
        st.info("Aucune session enregistr√©e pour cet utilisateur.")
    
    # Emplacement pour future fonctionnalit√© : √âvolution de l'engagement
    st.subheader("üìà √âvolution de l'engagement")
    st.info("üîú **Bient√¥t disponible :** Graphique d'√©volution de l'engagement au fil du temps")
    
    # Afficher un aper√ßu du futur graphique
    st.markdown("**M√©triques qui seront suivies :**")
    st.markdown("- Score d'engagement mensuel")
    st.markdown("- Nombre de sessions")
    st.markdown("- Temps pass√© sur la plateforme")
    st.markdown("- Contributions √† la communaut√©")
    
    # Emplacement pour future fonctionnalit√© : Parcours utilisateur
    st.subheader("üõ§Ô∏è Parcours utilisateur")
    st.info("üîú **Bient√¥t disponible :** Visualisation du parcours utilisateur √† travers la plateforme")

with tabs[4]:  # Actions recommand√©es
    col1, col2 = st.columns(2)
    
    with col1:
        # Recommandations personnalis√©es
        st.subheader("üéØ Recommandations personnalis√©es")
        
        # D√©finir des recommandations en fonction du profil
        if user_data['is_disengaged'] == 1:
            st.error("‚ö†Ô∏è **Utilisateur d√©sengag√©**")
            
            # Recommandations sp√©cifiques pour utilisateur d√©sengag√©
            st.markdown("### Plan de r√©activation recommand√©")
            
            st.markdown("**1. Campagne de r√©activation cibl√©e**")
            st.markdown("- Email personnalis√© avec contenu adapt√© √† son segment")
            st.markdown("- Offre sp√©ciale d'acc√®s √† du contenu premium")
            st.markdown("- Rappel des derniers contenus consult√©s")
            
            if user_cluster in cluster_profiles:
                st.markdown(f"**2. Contenu recommand√© pour ce segment**")
                for i, recommendation in enumerate(cluster_profiles[user_cluster]['recommendations']):
                    st.markdown(f"- {recommendation}")
            
            st.markdown("**3. Incitatifs √† l'engagement**")
            st.markdown("- Acc√®s temporaire √† des fonctionnalit√©s premium")
            st.markdown("- Invitation √† un webinaire exclusif")
            st.markdown("- Sondage pour comprendre ses besoins sp√©cifiques")
            
            if st.button("üìß Envoyer email de r√©activation", key="reactivation_email"):
                if user_cluster in cluster_profiles:
                    template = cluster_profiles[user_cluster]['email_template']
                    st.success(f"‚úÖ Email de r√©activation programm√© avec le mod√®le: '{template['subject']}'")
                    st.code(template['content'], language="text")
                else:
                    st.success("‚úÖ Email de r√©activation programm√©!")
        
        elif user_data['will_disengage_30d'] == 1:
            st.warning("‚ö†Ô∏è **Risque √©lev√© de d√©sengagement**")
            
            # Recommandations sp√©cifiques pour risque de d√©sengagement
            st.markdown("### Programme de fid√©lisation pr√©ventif")
            
            st.markdown("**1. Actions de r√©tention imm√©diates**")
            st.markdown("- Email personnalis√© avec contenu √† forte valeur ajout√©e")
            st.markdown("- Notification push pour signaler de nouveaux contenus pertinents")
            st.markdown("- Relance avec offre sp√©ciale limit√©e dans le temps")
            
            if user_cluster in cluster_profiles:
                st.markdown(f"**2. Contenu recommand√© pour ce segment**")
                for i, recommendation in enumerate(cluster_profiles[user_cluster]['recommendations']):
                    st.markdown(f"- {recommendation}")
            
            st.markdown("**3. Strat√©gie d'engagement**")
            st.markdown("- Parcours personnalis√© bas√© sur ses centres d'int√©r√™t")
            st.markdown("- Mini-challenge adapt√© √† son niveau")
            st.markdown("- Invitation √† rejoindre un groupe de discussion th√©matique")
            
            if st.button("üéÅ Envoyer offre de fid√©lisation", key="loyalty_offer"):
                if user_cluster in cluster_profiles:
                    template = cluster_profiles[user_cluster]['email_template']
                    st.success(f"‚úÖ Offre de fid√©lisation programm√©e avec le mod√®le: '{template['subject']}'")
                    st.code(template['content'], language="text")
                else:
                    st.success("‚úÖ Offre de fid√©lisation programm√©e!")
        
        else:
            st.success("‚úÖ **Utilisateur engag√©**")
            
            # Recommandations sp√©cifiques pour utilisateur engag√©
            st.markdown("### Programme d'approfondissement")
            
            st.markdown("**1. Opportunit√©s d'engagement avanc√©**")
            st.markdown("- Invitation √† contribuer √† la communaut√©")
            st.markdown("- Acc√®s √† des contenus premium exclusifs")
            st.markdown("- Participation √† des Data Challenges")
            
            if user_cluster in cluster_profiles:
                st.markdown(f"**2. Contenu recommand√© pour ce segment**")
                for i, recommendation in enumerate(cluster_profiles[user_cluster]['recommendations']):
                    st.markdown(f"- {recommendation}")
            
            st.markdown("**3. Valorisation de l'expertise**")
            st.markdown("- Programme de reconnaissance (badges, statuts)")
            st.markdown("- Opportunit√©s de partage de connaissances")
            st.markdown("- Invitation √† des √©v√©nements exclusifs")
            
            if st.button("‚≠ê Proposer offre premium", key="premium_offer"):
                if user_cluster in cluster_profiles:
                    template = cluster_profiles[user_cluster]['email_template']
                    st.success(f"‚úÖ Proposition d'offre premium programm√©e avec le mod√®le: '{template['subject']}'")
                    st.code(template['content'], language="text")
                else:
                    st.success("‚úÖ Proposition d'offre premium programm√©e!")
    
    with col2:
        # Plan d'action personnalis√©
        st.subheader("üìã Plan d'action personnalis√©")
        
        # Cr√©er un plan d'action bas√© sur le profil utilisateur
        today = datetime.now()
        
        # D√©terminer le type de plan en fonction du statut
        if user_data['is_disengaged'] == 1:
            plan_type = "R√©activation"
            actions = [
                {"date": today + timedelta(days=0), "action": "Envoyer email de r√©activation personnalis√©", "statut": "√Ä faire"},
                {"date": today + timedelta(days=3), "action": "Relance SMS si pas de r√©ponse", "statut": "Planifi√©"},
                {"date": today + timedelta(days=7), "action": "Offre sp√©ciale d'acc√®s premium temporaire", "statut": "Planifi√©"},
                {"date": today + timedelta(days=14), "action": "Sondage pour comprendre les raisons du d√©sengagement", "statut": "Planifi√©"},
                {"date": today + timedelta(days=21), "action": "Analyse des r√©sultats et ajustement de la strat√©gie", "statut": "Planifi√©"}
            ]
        elif user_data['will_disengage_30d'] == 1:
            plan_type = "R√©tention"
            actions = [
                {"date": today + timedelta(days=0), "action": "Envoyer email avec contenu personnalis√© √† forte valeur", "statut": "√Ä faire"},
                {"date": today + timedelta(days=2), "action": "Notification push avec nouveaux contenus pertinents", "statut": "Planifi√©"},
                {"date": today + timedelta(days=5), "action": "Invitation √† un mini-challenge adapt√©", "statut": "Planifi√©"},
                {"date": today + timedelta(days=10), "action": "Proposer un parcours th√©matique personnalis√©", "statut": "Planifi√©"},
                {"date": today + timedelta(days=15), "action": "√âvaluation de l'engagement et ajustement", "statut": "Planifi√©"}
            ]
        else:
            plan_type = "D√©veloppement"
            actions = [
                {"date": today + timedelta(days=0), "action": "Proposer du contenu premium exclusif", "statut": "√Ä faire"},
                {"date": today + timedelta(days=3), "action": "Invitation √† contribuer √† la communaut√©", "statut": "Planifi√©"},
                {"date": today + timedelta(days=7), "action": "Proposition de participation √† un Data Challenge", "statut": "Planifi√©"},
                {"date": today + timedelta(days=14), "action": "Invitation √† un √©v√©nement exclusif", "statut": "Planifi√©"},
                {"date": today + timedelta(days=21), "action": "Programme de reconnaissance et valorisation", "statut": "Planifi√©"}
            ]
        
        # Cr√©er un DataFrame pour le plan d'action
        plan_df = pd.DataFrame(actions)
        plan_df['Date'] = plan_df['date'].dt.strftime('%d/%m/%Y')
        plan_df = plan_df[['Date', 'action', 'statut']]
        plan_df.columns = ['Date', 'Action', 'Statut']
        
        # Afficher le plan d'action
        st.markdown(f"**Plan de {plan_type}**")
        st.dataframe(plan_df, use_container_width=True)
        
        # Bouton pour g√©n√©rer un plan d√©taill√©
        if st.button("üìù G√©n√©rer plan d'action d√©taill√©", key="generate_plan"):
            plan_content = f"# Plan d'action d√©taill√© - {plan_type}\n\n"
            plan_content += f"Utilisateur: {user_data['visitor_id']}\n"
            plan_content += f"Segment: {user_cluster} - {cluster_profiles.get(user_cluster, {}).get('title', 'Non d√©fini')}\n"
            plan_content += f"Date de g√©n√©ration: {today.strftime('%d/%m/%Y')}\n\n"
            
            plan_content += "## Actions planifi√©es\n\n"
            for action in actions:
                plan_content += f"### {action['date'].strftime('%d/%m/%Y')} - {action['action']}\n"
                plan_content += f"Statut: {action['statut']}\n\n"
                
                # Ajouter des d√©tails selon le type d'action
                if "email" in action['action'].lower():
                    if user_cluster in cluster_profiles:
                        template = cluster_profiles[user_cluster]['email_template']
                        plan_content += f"**Mod√®le d'email:**\n"
                        plan_content += f"Objet: {template['subject']}\n"
                        plan_content += f"Contenu:\n{template['content']}\n\n"
                
                elif "contenu" in action['action'].lower() and user_cluster in cluster_profiles:
                    plan_content += "**Contenus recommand√©s:**\n"
                    for rec in cluster_profiles[user_cluster]['recommendations']:
                        plan_content += f"- {rec}\n"
                    plan_content += "\n"
            
            plan_content += "## M√©triques √† surveiller\n\n"
            plan_content += "- Taux d'ouverture des emails\n"
            plan_content += "- Taux de clics sur les contenus recommand√©s\n"
            plan_content += "- Nombre de sessions apr√®s chaque action\n"
            plan_content += "- √âvolution du score d'engagement\n"
            plan_content += "- Temps pass√© sur la plateforme\n\n"
            
            plan_content += "## Objectifs\n\n"
            if user_data['is_disengaged'] == 1:
                plan_content += "- R√©activer l'utilisateur avec au moins 2 sessions dans les 30 prochains jours\n"
                plan_content += "- Augmenter le score d'engagement de 50% minimum\n"
                plan_content += "- Obtenir au moins une interaction significative (commentaire, t√©l√©chargement, etc.)\n"
            elif user_data['will_disengage_30d'] == 1:
                plan_content += "- Maintenir l'activit√© avec au moins 3 sessions dans les 30 prochains jours\n"
                plan_content += "- Augmenter le score d'engagement de 20% minimum\n"
                plan_content += "- Encourager la participation √† au moins un √©v√©nement ou challenge\n"
            else:
                plan_content += "- Approfondir l'engagement avec au moins 5 sessions dans les 30 prochains jours\n"
                plan_content += "- Obtenir au moins une contribution √† la communaut√©\n"
                plan_content += "- Convertir vers une utilisation premium ou un statut d'ambassadeur\n"
            
            st.download_button(
                label="‚¨áÔ∏è T√©l√©charger le plan d'action",
                data=plan_content,
                file_name=f"plan_action_{user_data['visitor_id']}.md",
                mime="text/markdown"
            )
        
        # Mod√®les de communication
        st.subheader("üí¨ Mod√®les de communication")
        
        if user_cluster in cluster_profiles:
            template = cluster_profiles[user_cluster]['email_template']
            
            comm_type = st.selectbox(
                "Type de communication",
                ["Email", "SMS", "Notification Push"]
            )
            
            if comm_type == "Email":
                st.markdown(f"**Objet sugg√©r√©:** {template['subject']}")
                st.text_area("Contenu de l'email", template['content'], height=200)
            elif comm_type == "SMS":
                sms_content = f"Management & Data Science: {template['subject'].replace('üîç ', '').replace('üîÑ ', '').replace('üéÅ ', '').replace('üèÜ ', '').replace('üìä ', '').replace('üåü ', '').replace('üëë ', '').replace('üîë ', '').replace('üå† ', '')}"
                st.text_area("Contenu du SMS", sms_content[:160], height=100)
                st.write(f"Caract√®res: {len(sms_content[:160])}/160")
            else:  # Notification Push
                notif_title = template['subject'].replace('üîç ', '').replace('üîÑ ', '').replace('üéÅ ', '').replace('üèÜ ', '').replace('üìä ', '').replace('üåü ', '').replace('üëë ', '').replace('üîë ', '').replace('üå† ', '')
                st.text_input("Titre de la notification", notif_title[:50])

with tabs[5]:  # Fonctionnalit√©s √† venir
    st.header("üöÄ Fonctionnalit√©s √† venir - Mai 2025")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üß† IA Pr√©dictive Avanc√©e")
        st.markdown("""
        **Disponible prochainement :** Notre nouveau mod√®le d'IA pr√©dictive vous permettra d'anticiper avec pr√©cision le comportement des utilisateurs.
        
        **Fonctionnalit√©s incluses :**
        - Pr√©diction multi-horizon (7j, 30j, 90j)
        - Identification des facteurs d'influence personnalis√©s
        - Recommandations d'actions pr√©ventives automatis√©es
        - Segmentation dynamique bas√©e sur les comportements pr√©dits
        
        **B√©n√©fices :** R√©duisez le d√©sengagement de 35% et augmentez la r√©tention de vos utilisateurs les plus pr√©cieux.
        """)
        
        st.image("https://via.placeholder.com/400x200?text=IA+Predictive+Preview", use_column_width=True)
        
        st.subheader("üîÑ Parcours Utilisateur Interactif")
        st.markdown("""
        **En d√©veloppement :** Visualisez le parcours complet de vos utilisateurs √† travers votre plateforme avec notre nouvelle interface interactive.
        
        **Fonctionnalit√©s incluses :**
        - Cartographie visuelle du parcours utilisateur
        - Identification des points de friction
        - Analyse des chemins de conversion
        - Comparaison avec les parcours optimaux
        
        **B√©n√©fices :** Optimisez votre UX et augmentez les taux de conversion de 25%.
        """)
    
    with col2:
        st.subheader("üéØ Recommandations Personnalis√©es par IA")
        st.markdown("""
        **En phase de test :** Notre syst√®me de recommandation bas√© sur l'IA analysera les comportements et pr√©f√©rences pour sugg√©rer le contenu parfaitement adapt√© √† chaque utilisateur.
        
        **Fonctionnalit√©s incluses :**
        - Recommandations de contenu ultra-personnalis√©es
        - Suggestions de connexions avec d'autres membres
        - Identification des opportunit√©s de contribution
        - Adaptation dynamique aux changements d'int√©r√™ts
        
        **B√©n√©fices :** Augmentez l'engagement de 40% et le temps pass√© sur la plateforme de 65%.
        """)
        
        st.image("https://via.placeholder.com/400x200?text=Recommandations+IA+Preview", use_column_width=True)
        
        st.subheader("üèÜ Syst√®me de Gamification Avanc√©")
        st.markdown("""
        **Lancement pr√©vu :** Notre nouveau syst√®me de gamification transformera l'exp√©rience utilisateur en un parcours engageant et gratifiant.
        
        **Fonctionnalit√©s incluses :**
        - Badges et r√©compenses personnalis√©s
        - Niveaux d'expertise progressifs
        - D√©fis adapt√©s au profil de chaque utilisateur
        - Tableaux de classement par domaine d'expertise
        
        **B√©n√©fices :** Stimulez les contributions de qualit√© et renforcez le sentiment d'appartenance √† la communaut√©.
        """)
    
    # Timeline de d√©ploiement
    st.subheader("üìÖ Calendrier de d√©ploiement")
    
    timeline_data = pd.DataFrame([
        {"Phase": "IA Pr√©dictive Avanc√©e", "D√©but": "Mai 2025", "Fin": "Juin 2025", "Statut": "En d√©veloppement"},
        {"Phase": "Parcours Utilisateur Interactif", "D√©but": "Juin 2025", "Fin": "Juillet 2025", "Statut": "Planifi√©"},
        {"Phase": "Recommandations Personnalis√©es par IA", "D√©but": "Juillet 2025", "Fin": "Ao√ªt 2025", "Statut": "En phase de test"},
        {"Phase": "Syst√®me de Gamification Avanc√©", "D√©but": "Ao√ªt 2025", "Fin": "Septembre 2025", "Statut": "Planifi√©"}
    ])
    
    st.dataframe(timeline_data, use_container_width=True)
    
    # Appel √† l'action
    st.success("üîî **Inscrivez-vous au programme b√™ta-testeurs pour essayer ces fonctionnalit√©s en avant-premi√®re !**")
    
    col1, col2 = st.columns([1, 3])
    with col1:
        st.button("‚úâÔ∏è S'inscrire au programme b√™ta", use_container_width=True)
    with col2:
        st.text_input("Email pour recevoir les mises √† jour", placeholder="votre.email@exemple.com")

